"use client";

import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { EyeIcon, EyeSlashIcon, PencilSquareIcon } from "@heroicons/react/24/outline";
import ReCAPTCHA from "react-google-recaptcha";

export default function SignupPage() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [confirm, setConfirm] = useState("");

  const [showPassword, setShowPassword] = useState(false);
  const [captchaToken, setCaptchaToken] = useState<string | null>(null);

  const [loading, setLoading] = useState(false);
  const [resending, setResending] = useState(false);

  const [error, setError] = useState("");
  const [message, setMessage] = useState("");
  const [showSuccess, setShowSuccess] = useState(false);

  // ‚è±Ô∏è ƒë·∫øm ng∆∞·ª£c resend 5 ph√∫t
  const [resendCountdown, setResendCountdown] = useState(300);
  const [canResend, setCanResend] = useState(false);

  const router = useRouter();

  // Kh·ªüi t·∫°o/RESET b·ªô ƒë·∫øm khi showSuccess b·∫≠t
  useEffect(() => {
    if (!showSuccess) return;
    setResendCountdown(300);
    setCanResend(false);

    const t = setInterval(() => {
      setResendCountdown((s) => {
        if (s <= 1) {
          clearInterval(t);
          setCanResend(true);
          return 0;
        }
        return s - 1;
      });
    }, 1000);

    return () => clearInterval(t);
  }, [showSuccess]);

  const handleSignup = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");
    setMessage("");

    // ‚ùå b·ªè b·∫Øt bu·ªôc tick ƒë·ªìng √Ω ‚Äî v√¨ ƒë√£ chuy·ªÉn sang note ‚ÄúB·∫±ng vi·ªác ƒëƒÉng k√Ω‚Ä¶‚Äù
    if (!captchaToken) return setError("‚ùå Vui l√≤ng x√°c th·ª±c reCAPTCHA.");
    if (password !== confirm) return setError("‚ùå M·∫≠t kh·∫©u kh√¥ng kh·ªõp.");

    const passwordRegex =
      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*#?&^])[A-Za-z\d@$!%*#?&^]{8,}$/;
    if (!passwordRegex.test(password)) {
      return setError(
        "‚ùå M·∫≠t kh·∫©u ph·∫£i c√≥ ch·ªØ hoa, th∆∞·ªùng, s·ªë v√† k√Ω t·ª± ƒë·∫∑c bi·ªát, √≠t nh·∫•t 8 k√Ω t·ª±."
      );
    }

    setLoading(true);
    try {
      const res = await fetch("/api/auth/register", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          email: email.trim(),
          password: password.trim(),
          captchaToken,
        }),
      });

      const data = await res.json().catch(() => ({}));

      if (res.ok) {
        if (data.resent) {
          setError("");
          setMessage("‚úÖ ƒê√£ g·ª≠i l·∫°i email x√°c th·ª±c. Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞.");
          setShowSuccess(true);
          return;
        }
        setError("");
        setMessage("‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c th·ª±c.");
        setShowSuccess(true);
        return;
      }

      if (res.status === 409) {
        setShowSuccess(false);
        setError("Email ƒë√£ t·ªìn t·∫°i. Vui l√≤ng ƒëƒÉng nh·∫≠p.");
        return;
      }

      setError(data.error || `ƒêƒÉng k√Ω th·∫•t b·∫°i (m√£ ${res.status}).`);
    } catch {
      setError("L·ªói m·∫°ng ho·∫∑c server. Th·ª≠ l·∫°i sau.");
    } finally {
      setLoading(false);
    }
  };

  // G·ª≠i l·∫°i email x√°c th·ª±c qua endpoint ri√™ng
  const handleResend = async () => {
    setResending(true);
    try {
      const res = await fetch("/api/auth/resend", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email: email.trim() }),
      });
      const data = await res.json().catch(() => ({}));

      if (res.ok && data.ok) {
        setMessage("‚úÖ ƒê√£ g·ª≠i l·∫°i email x√°c th·ª±c. Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞.");
        setResendCountdown(300);
        setCanResend(false);
        setShowSuccess(true);
      } else {
        setError(data.error || "Kh√¥ng th·ªÉ g·ª≠i l·∫°i email x√°c th·ª±c.");
      }
    } catch {
      setError("L·ªói m·∫°ng. Th·ª≠ l·∫°i.");
    } finally {
      setResending(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <form
        onSubmit={handleSignup}
        className="bg-white p-6 rounded shadow-md w-full max-w-sm space-y-4"
      >
        <h1 className="text-xl font-bold text-center flex items-center justify-center gap-2">
          <PencilSquareIcon className="w-5 h-5" />
          ƒêƒÉng k√Ω
        </h1>

        {showSuccess ? (
          <div className="text-green-600 text-sm text-center">{message}</div>
        ) : error ? (
          <div className="text-red-600 text-sm text-center">{error}</div>
        ) : null}

        <input
          type="email"
          placeholder="Email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          className="w-full border px-3 py-2 rounded"
          required
        />

        <div className="relative">
          <input
            type={showPassword ? "text" : "password"}
            placeholder="M·∫≠t kh·∫©u"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="w-full border px-3 py-2 rounded pr-10"
            required
          />
          <button
            type="button"
            className="absolute top-2 right-3 cursor-pointer"
            onClick={() => setShowPassword((v) => !v)}
            aria-label={showPassword ? "·∫®n m·∫≠t kh·∫©u" : "Hi·ªán m·∫≠t kh·∫©u"}
          >
            {showPassword ? (
              <EyeSlashIcon className="h-5 w-5 text-gray-500" />
            ) : (
              <EyeIcon className="h-5 w-5 text-gray-500" />
            )}
          </button>
        </div>

        <input
          type="password"
          placeholder="X√°c nh·∫≠n m·∫≠t kh·∫©u"
          value={confirm}
          onChange={(e) => setConfirm(e.target.value)}
          className="w-full border px-3 py-2 rounded"
          required
        />

        {/* üîΩ D√≤ng ghi ch√∫ ƒëi·ªÅu kho·∫£n + ch√≠nh s√°ch (thay cho checkbox) */}
        <div className="text-xs text-gray-600 text-center leading-5">
          B·∫±ng vi·ªác ƒëƒÉng k√Ω, b·∫°n ƒë√£ ƒë·ªìng √Ω v·ªõi Tora v·ªÅ{" "}
          <Link
            href="/terms"
            className="font-semibold text-red-600 hover:underline focus:outline-none focus:ring-2 focus:ring-red-500 rounded-sm"
          >
            ƒêi·ªÅu kho·∫£n s·ª≠ d·ª•ng
          </Link>
          {" "} &{" "}
          <Link
            href="/privacy"
            className="font-semibold text-red-600 hover:underline focus:outline-none focus:ring-2 focus:ring-red-500 rounded-sm"
          >
            Ch√≠nh s√°ch b·∫£o m·∫≠t
          </Link>.
        </div>

        <ReCAPTCHA
          sitekey={process.env.NEXT_PUBLIC_RECAPTCHA_SITE_KEY!}
          onChange={(token) => setCaptchaToken(token)}
        />

        <button
          type="submit"
          className="w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700 disabled:opacity-60"
          disabled={loading || showSuccess}
        >
          {loading ? "ƒêang x·ª≠ l√Ω..." : "ƒêƒÉng k√Ω"}
        </button>

        {/* Kh·ªëi resend ch·ªâ hi·ªán sau khi ƒë√£ g·ª≠i email x√°c th·ª±c */}
        {showSuccess && (
          <div className="text-center space-y-2">
            {canResend ? (
              <button
                type="button"
                onClick={handleResend}
                disabled={resending}
                className="w-full bg-gray-800 text-white py-2 rounded hover:bg-gray-900 disabled:opacity-60"
              >
                {resending ? "ƒêang g·ª≠i l·∫°i..." : "G·ª≠i l·∫°i email x√°c th·ª±c"}
              </button>
            ) : (
              <p className="text-sm text-gray-500">
                B·∫°n c√≥ th·ªÉ g·ª≠i l·∫°i sau: <b>{resendCountdown}s</b>
              </p>
            )}
          </div>
        )}

        <p className="text-center text-xs">
          ƒê√£ c√≥ t√†i kho·∫£n?{" "}
          <Link href="/signin" className="text-blue-500 underline">
            ƒêƒÉng nh·∫≠p
          </Link>
        </p>
      </form>
    </div>
  );
}
